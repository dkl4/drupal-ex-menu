<?php

/**
 * @file
 * Module file for menu_example.
 */

/**
 * @defgroup menu_example Example : Menu
 * @ingroup examples
 * @{
 * Demonstrates uses of the Menu APIs in Drupal.
 *
 * The Page Example module also talks about the menu system, as well
 * as how to use menu arguments to generate pages.
 *
 * @see hook_menu()
 * @see hook_menu_alter()
 * @see hook_menu_link_alter()
 * @see page_example.module
 * @see page_example_menu()
 */

/**
 * Implements hook_menu().
 */
function menu_example_menu() {

  // A simple example which defines a page callback and menu entry.

  // Menu items are defined by placing them in an $items array. The array key
  // (in this case 'menu_example') is the path that defines the menu router
  // entry, so the page will be accessible from the URL
  //  example.com/examples/menu_example.

  $items['examples/menu_example'] = array(

    // We are using the default menu type, so the following can be omitted.
    //   'type' => MENU_NORMAL_ITEM,


    // The menu title. Don NOT use t() which is called by default. You can
    // override the use of t() by defining a 'title callback'. This is explained
    // in the 'menu_example/title_callbacks' example below.
    'title' => 'Menu Example',

    // Description (hover flyover for menu link). Does NOT use t(), which is
    // called automatically.
    'description' => 'Simplest possible menu type, and the parent menu entry for others',

    // Function to be called when this path is accessed.
    'page callback' => '_menu_example_basic_instructions',

    // Arguments to the page callback. Here we'll use them just to provide
    // content for our page.
    'page arguments' => array(t('This page is displayed by the simplest (and base) menu example. Note that the title of the page is the same as the link title. You can also <a href="!link">visit a similar page with no menu link</a>. Also, note that there is a hook_menu_alter() example that has changed the path of one of the menu items.',
            array('!link' => url('examples/menu_example/path_only')))),

    // If the page is meant to be accessible to all users, you can set 'access callback'
    // to TRUE. This bypasses all access checks. For an explanation on
    // how to use the permissions system to restrict access for certain users,
    // see the example 'examples/menu_example/permissioned/controlled' below.
    'access callback' => TRUE,

    // If the page callback is located in another file, spedify it here and
    // that file will be automatically loaded when needed.
    // 'file' => 'menu_example.inc',

    // We can choose which menu gets the link. The default is 'navigation'
    // 'menu_name' => 'navigation',

    // Show the menu link as expanded.
    'expanded' => TRUE,
  );

  // Show a menu link in a menu other than the default "Navigation" menu.
  // The menu must already exist.
  $items['examples/menu_example_alternate_menu'] = array(
    'title' => 'Menu Example : Menu in Management menu',
    // Machine name of the menu in which the link should appear.
    'menu_name' => 'management',
    'page callback' => '_menu_example_menu_page',
    'page arguments' => array(t('This will be in the Management menu instead of the default Navigation menu')),
    'access callback' => TRUE,
    'weight'          => 99,     // High value (ex 99) moves item to right in Mgmt Menu
    'expanded' => TRUE,
  );

  // A menu entry with simple permissions using user_access().

  // First, provide a courtesy menu item that mentions the existence of the
  // permissioned item.
  $items['examples/menu_example/permissioned'] = array(
    'title'           => 'Permissioned Example Courtesy Page',
    'page callback'   => '_menu_example_menu_page',
    'page arguments'  => array(t('A menu item that requires the "access protected menu example" permission is at <a href="!link">examples/menu_example/permissioned/controlled</a>', array('!link' => url('examples/menu_example/permissioned/controlled')))),
    'access callback' => TRUE,
    'expanded'        => TRUE,
  );

  // Now provide the actual permissioned menu item.
  $items['examples/menu_example/permissioned/controlled'] = array(
    'title' => 'Permissioned Example Controlled Page',
    'description' => 'This menu entry will not appear and the page will not be accessible without the "access protected menu example" permission.',
    'page callback' => '_menu_example_menu_page',
    'page arguments' => array(t('This menu entry will not show and the page will not be accessible without the "access protected menu example" permission.')),
    // For a permissioned menu entry, we provide an access callback which
    // determines whether the current user should have access. The default is
    // user_access(), which we'll use in this case. Since it's the default,
    // we don't have to enter it.
    //  'access callback' => 'user_access',

    // The 'access arguments' are passed to the 'access callback to help it
    // do its job. In the case of user_access(), we need to pass a permission
    // as the first argument.  Per hook_menu API docs, 'access arguments' is an array.

    'access arguments' => array('access protected menu example'),

    // Note the 'access protected menu example' permission will not show up in
    // the admin/people/permissions page until you implement hook_permission().

    // The optional weight element tells how to order the submenu items.
    // Higher weights are "heavier", dropping to the bottom of the menu.
    'weight' => 10,
    'expanded' => TRUE,
  );


  // We will define our own "access callback" function "menu_example_custom_access",
  // rather than the default 'user_access'.
  //
  // The function takes a "role" of user as an argument.

  // Here is the parent menu item for Custom Access Callback
  $items['examples/menu_example/custom_access'] = array(
    'title'           => 'Custom Access Callback Open',
    'page callback'   => '_menu_example_menu_page',
    'page arguments'  => array(t('A menu item that requires the user to possess a role of "authenticated user" is at <a href="!link">examples/menu_example/custom_access/page</a>',
                                array('!link' => url('examples/menu_example/custom_access/page')))),
    'access callback' => TRUE,    // Leave parent menu route open
    'expanded'        => TRUE,
    'weight'          => -5,
  );

  // Here is the protected custom access route
  $items['examples/menu_example/custom_access/page'] = array(
    'title'            => 'Custom Access Callback Protected',
    'description'      => 'This menu entry will not show and the page will not be accessible without the user being an "authenticated user".',
    'page callback'    => '_menu_example_menu_page',
    'page arguments'   => array(t('This menu entry will not be visible and access will result in a 403 error unless the user has the "authenticated user" role. This is accomplished with a custom access callback.')),
    'access callback'  => 'menu_example_custom_access',
    'access arguments' => array('authenticated user'),
  );

  // A menu router entry with no menu link. This could be used any time we
  // don't want the user to see a link in the menu. Otherwise, it's the same
  // as the "simplest" entry above. MENU_CALLBACK is use for all menu items
  // which don't need a visible menu link, including services and other pages
  // that may be linked to but are not intended to be accessed directly.

  // First, provide a courtesy link in the menu so people can find this

  $items['examples/menu_example/path_only'] = array(
      'title'            => 'MENU_CALLBACK example courtesy page',
      'page callback'    => '_menu_example_menu_page',
      'page arguments'   => array(t('A menu entry with no menu link (MENU_CALLBACK) is at <a href="!link">!link</a>',
                                    array('!link' => url('examples/menu_example/path_only/callback')))),
      'access callback'  => TRUE,
      'access arguments' => array('administer name'),
      'weight'           => 20,
      'menu_name'        => 'Navigation',              // This is default menu
      'type'             => MENU_NORMAL_ITEM,          // Give us a Nav link for courtesy
  );

  $items['examples/menu_example/path_only/callback'] = array(

    // A type of MENU_CALLBACK means leave the path completely out of the menu links.
    'type'            => MENU_CALLBACK,

    // The title is still used for the page title, even though it's not used
    // for the menu link text, since there's no menu link.
    'title'           => 'Callback Only',

    'page callback'   => '_menu_example_menu_page',
    'page arguments'  => array(t('The menu entry for this page is of type MENU_CALLBACK, so it provides only a path but not a link in the menu links, but it is the same in every other way to the simplest example.')),
    'access callback' => TRUE,
  );

  // A menu entry with tabs.
  // For tabs we need at least 3 things:
  // 1. A parent MENU_NORMAL_ITEM menu item (examples/menu_example/tabs in this
  //    example.)
  // 2. A primary tab (the one that is active when we land on the base menu).
  //    This tab is of type MENU_DEFAULT_LOCAL_TASK.
  // 3. Some other menu entries for the other tabs, of type MENU_LOCAL_TASK.
  $items['examples/menu_example/tabs'] = array(
    'type'            => MENU_NORMAL_ITEM,  // Not necessary since this is the default.
    'title'           => 'Tabs',
    'description'     => 'Shows how to create primary and secondary tabs',
    'page callback'   => '_menu_example_menu_page',
    'page arguments'  => array(t('This is the "tabs" menu entry.')),
    'access callback' => TRUE,
    'weight'          => 30,         // Put this lower in the Nav link block than above MENU_CALLBACK example @ wt = 20
  );

  // For the default local task, we need very little configuration, as the
  // callback and other conditions are handled by the parent callback.
  // With only one "tab", I don't think you actually see any tabs -- need at least two LOCAL_TASKS
  $items['examples/menu_example/tabs/default'] = array(
    'type'   => MENU_DEFAULT_LOCAL_TASK,
    'title'  => 'Default primary tab',
    'weight' => 1,                  // Here wt may only apply to the tabs
  );

  // Now add the rest of the LOCAL_TASK tab entries.
  foreach (array(t('second') => 2, t('third') => 3, t('fourth') => 4) as $tabname => $weight) {
    $items["examples/menu_example/tabs/$tabname"] = array(
      'type'            => MENU_LOCAL_TASK,
      'title'           => $tabname,
      'page callback'   => '_menu_example_menu_page',
      'page arguments'  => array(t('This is the tab "@tabname" in the "basic tabs" example', array('@tabname' => $tabname))),
      'access callback' => TRUE,

    // The weight property overrides the default alphabetic ordering of menu
    // entries, allowing us to get our tabs in the order we want.
      'weight' => $weight,       // Again, this seems only to apply to tabs, not to Nav menu links
    );
  }

  // Finally, we'll add secondary tabs to the default tab of the tabs entry.

  // The default local task needs very little information.
  // Note the path.  We're under FIRST which came from the first (parent) set of tabs
  $items['examples/menu_example/tabs/default/first'] = array(
    'type'  => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'first (default) sub',
    // The additional page callback and related items are handled by the
    // parent menu item.
  );

  // Need at least two sub-tabs for one to be seen
  foreach (array(t('second-sub'), t('third-sub')) as $tabname) {
    $items["examples/menu_example/tabs/default/$tabname"] = array(
      'type' => MENU_LOCAL_TASK,
      'title' => $tabname,
      'page callback' => '_menu_example_menu_page',
      'page arguments' => array(t('This is the secondary tab "@tabname" in the "basic tabs" example "default" tab', array('@tabname' => $tabname))),
      'access callback' => TRUE,
    );
  }


  // All the portions of the URL after the base menu are passed to the page
  // callback as separate arguments, and can be captured by the page callback
  // in its argument list. Our _menu_example_menu_page() function captures
  // arguments in its function signature and can output them.
  $items['examples/menu_example/use_url_arguments'] = array(
    'title'           => 'Extra Arguments',
    'description'     => 'The page callback can use the arguments provided after the path used as key',
    'page callback'   => '_menu_example_menu_page',
    'page arguments'  => array(t('This page demonstrates using arguments in the path (portions of the path after "menu_example/url_arguments". For example, access it with <a href="!link1">!link1</a> or <a href="!link2">!link2</a>).', array('!link1' => url('examples/menu_example/use_url_arguments/one/two'), '!link2' => url('examples/menu_example/use_url_arguments/firstarg/secondarg')))),
    'access callback' => TRUE,
    'weight'          => 40,
  );


  // The menu title can be dynamically created by using the 'title callback'
  // which by default is t(). Here we provide a title callback which adjusts
  // the menu title based on the current user's username.
  $items['examples/menu_example/title_callbacks'] = array(
    'title callback'  => '_menu_example_simple_title_callback',
    'title arguments' => array(t('Dynamic title: username =') . ' '),
    'description'     => 'The title of this menu item is dynamically generated',
    'page callback'   => '_menu_example_menu_page',
    'page arguments'  => array(t('The menu title is dynamically changed by the title callback')),
    'access callback' => TRUE,
    'weight'          => 50,
  );


  // Sometimes we need to capture a specific argument within the menu path,
  // as with the menu entry 'example/menu_example/placeholder_argument/3333/display',
  // where we need to capture the "3333". In that case, we use a placeholder in
  // the path provided in the menu entry. The (odd) way this is done is by using
  // array(numeric_position_value) as the value for 'page arguments'. The
  // numeric_position_value is the zero-based index of the portion of the URL
  // which should be passed to the 'page callback'.

  // First we provide a courtesy link with information on how to access
  // an item with a placeholder.
  $items['examples/menu_example/placeholder_argument'] = array(
    'title'           => 'Placeholder Arguments',
    'page callback'   => '_menu_example_menu_page',
    'page arguments'  => array(t('Demonstrate placeholders by visiting <a href="!link">examples/menu_example/placeholder_argument/3343/display</a>', array('!link' => url('examples/menu_example/placeholder_argument/3343/display')))),
    'access callback' => TRUE,
    'weight'          => 60,
  );

  // Now the actual path. Note the 'page arguments' value of array(3) comes from the 3 (%) URL position below.
  //           0        1                 2          3    4
  $items['examples/menu_example/placeholder_argument/%/display'] = array(
    'title'           => 'Placeholder Arguments',
    'page callback'   => '_menu_example_menu_page',

    // Pass the value of '%', which is zero-based argument 3, to the
    // 'page callback'. So if the URL is
    //       0         1                 2          3     4
    // 'examples/menu_example/placeholder_argument/333/display' then the value 333
    // will be passed into the 'page callback'.
    'page arguments'  => array(3),         // Here, 'page arguments' takes the value of $content in _menu_example_menu_page below
    'access callback' => TRUE,
  );


  // Drupal provides magic placeholder processing as well, so if the placeholder
  // is '%menu_example_arg_optional', the function
  // menu_example_arg_optional_LOAD($arg) will be called to translate the path
  // argument to a more substantial OBJECT. $arg will be the value of the
  // placeholder. Then the return value of menu_example_id_load($arg) will be
  // passed to the 'page callback'.
  // In addition, if (in this case) menu_example_arg_optional_TO_ARG() exists,
  // then a menu link can be created using the results of that function as a
  // default for %menu_example_arg_optional.
  //
  // To get this to work, go to this URL : examples/menu_example/default_arg/99
  // This will call menu_example_arg_optional_load below, which will call
  //   _menu_example_mappings below, which returns "Jackpot!" for the 99 arg
  //
  // Note you won't get a Nav block menu link until you add the menu_example_arg_optional_to_arg
  //   function below.
  //         0          1            2                 3 = 'page arguments'
  $items['examples/menu_example/default_arg/%menu_example_arg_optional'] = array(
    'title'           => 'Processed Placeholder Arguments',
    'page callback'   => '_menu_example_menu_page',
    'page arguments'  => array(3),  // arg 3 (4rd arg) is the one we want.
    'access callback' => TRUE,
    'weight'          => 70,
  );



  return $items;
}  // function menu_example_menu

/**
 * Page callback for the simplest introduction menu entry.
 *
 * @param $content
 *   Some content passed in
 */
function _menu_example_basic_instructions($content = NULL) {
  $base_content = t(
   'This is the base page of the Menu Example. There are a numbe of examples
    here, from the most basic (like this one) to extravagant mappings of loaded
    placeholder arguments. Enjoy!'
  );
  return '<div>' . $base_content . '</div><br /><div>' . $content . '</div>';
}

/**
 * Page callback for use with most of the menu entries. The arguments it
 * receives determine what it outputs.
 *
 * @param $content
 *   The base content to output.
 * @param $arg1
 *   First additional argument from the path used to access the menu
 * @param $arg2
 *   Second additional URL argument
 */
function _menu_example_menu_page($content = NULL, $arg1 = NULL, $arg2 = NULL) {
  $output = '<div>' . $content . '</div>';

  if (!empty($arg1)) {
    $output .= '<div>' . t('Argument 1 = %arg', array('%arg' => $arg1)) . '</div>';
  }
  if (!empty($arg2)) {
    $output .= '<div>' . t('Argument 2 = %arg', array('%arg' => $arg2)) . '</div>';
  }
  return $output;
}

/**
 * Implements hook_permission() to provide a demonstration access string.
 */
function menu_example_permission() {
  return array(
    'access protected menu example' => array(
      'title' => t('Access the protected menu example'),
    ),
  );
}

/**
 * Determine if the current user has the role specified.
 *
 * @param $role_name
 *   The role required for access
 * @return bool
 *   True if the acting user has the role specified.
 */
function menu_example_custom_access($role_name) {
  $access_granted = in_array($role_name, $GLOBALS['user']->roles);
  return $access_granted;
}


/**
 * Utility function to provide mappings from integers to some strings.
 * This would normally be some database lookup to get an object or array from
 * a key.
 *
 * Used by menu_example_arg_optional_load below and "magic positional loading" $items above.
 *
 * @param $id
 *
 * @return
 *   The string to which the integer key mapped, or NULL if it did not map.
 */
function _menu_example_mappings($id) {
  $mapped_value = NULL;
  static $mappings = array(
    1  => 'one',
    2  => 'two',
    3  => 'three',
    99 => 'jackpot! default',
  );
  if (isset($mappings[$id])) {
    $mapped_value = $mappings[$id];
  }
  return $mapped_value;      // This seems to return a scalar string
}


/**
 * Title callback to rewrite the '/user' menu link.
 *
 * @param $base_string
 *   string to be prepended to current user's name.
 */
function _menu_example_simple_title_callback($base_string) {
  //return "HI DKL";
  global $user;
  $username = !empty($user->name) ? $user->name : t('anonymous');
  return $base_string . ' ' . $username;
}


/**
 * Loads an item based on its $id.
 *
 * See above $items['examples/menu_example/default_arg/%menu_example_arg_optional'] = array(
 *
 * In this case we're just creating a more extensive string. In a real example
 * we would load or create some type of object.
 *
 * @param $id
 */
function menu_example_arg_optional_load($id) {
  $mapped_value = _menu_example_mappings($id);
  if (!empty($mapped_value)) {
    return t('Loaded value was %loaded', array('%loaded' => $mapped_value));
  }
  else {
    return t('Sorry, the id %id was not found to be loaded', array('%id' => $id));
  }
}


/**
 * This is an extension of the magical loading of objects from positional URL params
 *
 * A to_arg() function is used to provide a default for the arg in the
 * wildcard. The purpose is to provide a menu link that will function if no
 * argument is given. For example, in the case of the menu item
 * 'examples/menu_example/default_arg/%menu_example_arg_optional' the third argument
 * is required, and the menu system cannot make a menu link using this path
 * since it contains a placeholder. However, when the to_arg() function is
 * provided, the menu system will create a menu link pointing to the path
 * which would be created with the to_arg() function filling in the
 * %menu_example_arg_optional.
 *
 * @param $arg
 *   The arg (URL fragment) to be tested.
 */
function menu_example_arg_optional_to_arg($arg) {
  // If our argument is not provided, give a default of 99.
  // This is how we get the "default" of 99 referenced above in _menu_example_mappings
  // This will give a Nav menu link of form 'examples/menu_example/default_arg/99'
  // where 99 is a default value.  In practice, the default would be something like
  // the user Id of the logged in user.
  return (empty($arg) || $arg == '%') ? 99 : $arg;
}
/**
 * @} End of "defgroup menu_example".
 */