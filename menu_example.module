<?php

/**
 * @file
 * Module file for menu_example.
 */

/**
 * @defgroup menu_example Example : Menu
 * @ingroup examples
 * @{
 * Demonstrates uses of the Menu APIs in Drupal.
 *
 * The Page Example module also talks about the menu system, as well
 * as how to use menu arguments to generate pages.
 *
 * @see hook_menu()
 * @see hook_menu_alter()
 * @see hook_menu_link_alter()
 * @see page_example.module
 * @see page_example_menu()
 */

/**
 * Implements hook_menu().
 */
function menu_example_menu() {

  // A simple example which defines a page callback and menu entry.

  // Menu items are defined by placing them in an $items array. The array key
  // (in this case 'menu_example') is the path that defines the menu router
  // entry, so the page will be accessible from the URL
  //  example.com/examples/menu_example.

  $items['examples/menu_example'] = array(

    // We are using the default menu type, so the following can be omitted.
    //   'type' => MENU_NORMAL_ITEM,


    // The menu title. Don NOT use t() which is called by default. You can
    // override the use of t() by defining a 'title callback'. This is explained
    // in the 'menu_example/title_callbacks' example below.
    'title' => 'Menu Example',

    // Description (hover flyover for menu link). Does NOT use t(), which is
    // called automatically.
    'description' => 'Simplest possible menu type, and the parent menu entry for others',

    // Function to be called when this path is accessed.
    'page callback' => '_menu_example_basic_instructions',

    // Arguments to the page callback. Here we'll use them just to provide
    // content for our page.
    'page arguments' => array(t('This page is displayed by the simplest (and base) menu example. Note that the title of the page is the same as the link title. You can also <a href="!link">visit a similar page with no menu link</a>. Also, note that there is a hook_menu_alter() example that has changed the path of one of the menu items.',
            array('!link' => url('examples/menu_example/path_only')))),

    // If the page is meant to be accessible to all users, you can set 'access callback'
    // to TRUE. This bypasses all access checks. For an explanation on
    // how to use the permissions system to restrict access for certain users,
    // see the example 'examples/menu_example/permissioned/controlled' below.
    'access callback' => TRUE,

    // If the page callback is located in another file, spedify it here and
    // that file will be automatically loaded when needed.
    // 'file' => 'menu_example.inc',

    // We can choose which menu gets the link. The default is 'navigation'
    // 'menu_name' => 'navigation',

    // Show the menu link as expanded.
    'expanded' => TRUE,
  );

  // Show a menu link in a menu other than the default "Navigation" menu.
  // The menu must already exist.
  $items['examples/menu_example_alternate_menu'] = array(
    'title' => 'Menu Example : Menu in Management menu',
    // Machine name of the menu in which the link should appear.
    'menu_name' => 'management',
    'page callback' => '_menu_example_menu_page',
    'page arguments' => array(t('This will be in the Management menu instead of the default Navigation menu')),
    'access callback' => TRUE,
    'weight'          => 99,     // High value (ex 99) moves item to right in Mgmt Menu
    'expanded' => TRUE,
  );

  // A menu entry with simple permissions using user_access().

  // First, provide a courtesy menu item that mentions the existence of the
  // permissioned item.
  $items['examples/menu_example/permissioned'] = array(
    'title'           => 'Permissioned Example Courtesy Page',
    'page callback'   => '_menu_example_menu_page',
    'page arguments'  => array(t('A menu item that requires the "access protected menu example" permission is at <a href="!link">examples/menu_example/permissioned/controlled</a>', array('!link' => url('examples/menu_example/permissioned/controlled')))),
    'access callback' => TRUE,
    'expanded'        => TRUE,
  );

  // Now provide the actual permissioned menu item.
  $items['examples/menu_example/permissioned/controlled'] = array(
    'title' => 'Permissioned Example Controlled Page',
    'description' => 'This menu entry will not appear and the page will not be accessible without the "access protected menu example" permission.',
    'page callback' => '_menu_example_menu_page',
    'page arguments' => array(t('This menu entry will not show and the page will not be accessible without the "access protected menu example" permission.')),
    // For a permissioned menu entry, we provide an access callback which
    // determines whether the current user should have access. The default is
    // user_access(), which we'll use in this case. Since it's the default,
    // we don't have to enter it.
    //  'access callback' => 'user_access',

    // The 'access arguments' are passed to the 'access callback to help it
    // do its job. In the case of user_access(), we need to pass a permission
    // as the first argument.  Per hook_menu API docs, 'access arguments' is an array.

    'access arguments' => array('access protected menu example'),

    // Note the 'access protected menu example' permission will not show up in
    // the admin/people/permissions page until you implement hook_permission().

    // The optional weight element tells how to order the submenu items.
    // Higher weights are "heavier", dropping to the bottom of the menu.
    'weight' => 10,
    'expanded' => TRUE,
  );


  // We will define our own "access callback" function "menu_example_custom_access",
  // rather than the default 'user_access'.
  //
  // The function takes a "role" of user as an argument.

  // Here is the parent menu item for Custom Access Callback
  $items['examples/menu_example/custom_access'] = array(
    'title'           => 'Custom Access Callback Open',
    'page callback'   => '_menu_example_menu_page',
    'page arguments'  => array(t('A menu item that requires the user to possess a role of "authenticated user" is at <a href="!link">examples/menu_example/custom_access/page</a>',
                                array('!link' => url('examples/menu_example/custom_access/page')))),
    'access callback' => TRUE,    // Leave parent menu route open
    'expanded'        => TRUE,
    'weight'          => -5,
  );

  // Here is the protected custom access route
  $items['examples/menu_example/custom_access/page'] = array(
    'title'            => 'Custom Access Callback Protected',
    'description'      => 'This menu entry will not show and the page will not be accessible without the user being an "authenticated user".',
    'page callback'    => '_menu_example_menu_page',
    'page arguments'   => array(t('This menu entry will not be visible and access will result in a 403 error unless the user has the "authenticated user" role. This is accomplished with a custom access callback.')),
    'access callback'  => 'menu_example_custom_access',
    'access arguments' => array('authenticated user'),
  );

  // A menu router entry with no menu link. This could be used any time we
  // don't want the user to see a link in the menu. Otherwise, it's the same
  // as the "simplest" entry above. MENU_CALLBACK is use for all menu items
  // which don't need a visible menu link, including services and other pages
  // that may be linked to but are not intended to be accessed directly.

  // First, provide a courtesy link in the menu so people can find this

  $items['examples/menu_example/path_only'] = array(
      'title'            => 'MENU_CALLBACK example courtesy page',
      'page callback'    => '_menu_example_menu_page',
      'page arguments'   => array(t('A menu entry with no menu link (MENU_CALLBACK) is at <a href="!link">!link</a>',
                                    array('!link' => url('examples/menu_example/path_only/callback')))),
      'access callback'  => TRUE,
      'access arguments' => array('administer name'),
      'weight'           => 20,
      'menu_name'        => 'Navigation',              // This is default menu
      'type'             => MENU_NORMAL_ITEM,          // Give us a Nav link for courtesy
  );

  $items['examples/menu_example/path_only/callback'] = array(

    // A type of MENU_CALLBACK means leave the path completely out of the menu links.
    'type'            => MENU_CALLBACK,

    // The title is still used for the page title, even though it's not used
    // for the menu link text, since there's no menu link.
    'title'           => 'Callback Only',

    'page callback'   => '_menu_example_menu_page',
    'page arguments'  => array(t('The menu entry for this page is of type MENU_CALLBACK, so it provides only a path but not a link in the menu links, but it is the same in every other way to the simplest example.')),
    'access callback' => TRUE,
  );

  // A menu entry with tabs.
  // For tabs we need at least 3 things:
  // 1. A parent MENU_NORMAL_ITEM menu item (examples/menu_example/tabs in this
  //    example.)
  // 2. A primary tab (the one that is active when we land on the base menu).
  //    This tab is of type MENU_DEFAULT_LOCAL_TASK.
  // 3. Some other menu entries for the other tabs, of type MENU_LOCAL_TASK.
  $items['examples/menu_example/tabs'] = array(
    'type'            => MENU_NORMAL_ITEM,  // Not necessary since this is the default.
    'title'           => 'Tabs',
    'description'     => 'Shows how to create primary and secondary tabs',
    'page callback'   => '_menu_example_menu_page',
    'page arguments'  => array(t('This is the "tabs" menu entry.')),
    'access callback' => TRUE,
    'weight'          => 30,         // Put this lower in the Nav link block than above MENU_CALLBACK
  );

  return $items;
}  // function menu_example_menu

/**
 * Page callback for the simplest introduction menu entry.
 *
 * @param $content
 *   Some content passed in
 */
function _menu_example_basic_instructions($content = NULL) {
  $base_content = t(
   'This is the base page of the Menu Example. There are a numbe of examples
    here, from the most basic (like this one) to extravagant mappings of loaded
    placeholder arguments. Enjoy!'
  );
  return '<div>' . $base_content . '</div><br /><div>' . $content . '</div>';
}

/**
 * Page callback for use with most of the menu entries. The arguments it
 * receives determine what it outputs.
 *
 * @param $content
 *   The base content to output.
 * @param $arg1
 *   First additional argument from the path used to access the menu
 * @param $arg2
 *   Second additional URL argument
 */
function _menu_example_menu_page($content = NULL, $arg1 = NULL, $arg2 = NULL) {
  $output = '<div>' . $content . '</div>';

  if (!empty($arg1)) {
    $output .= '<div>' . t('Argument 1 = %arg', array('%arg' => $arg1)) . '</div>';
  }
  if (!empty($arg2)) {
    $output .= '<div>' . t('Argument 2 = %arg', array('%arg' => $arg2)) . '</div>';
  }
  return $output;
}

/**
 * Implements hook_permission() to provide a demonstration access string.
 */
function menu_example_permission() {
  return array(
    'access protected menu example' => array(
      'title' => t('Access the protected menu example'),
    ),
  );
}

/**
 * Determine if the current user has the role specified.
 *
 * @param $role_name
 *   The role required for access
 * @return bool
 *   True if the acting user has the role specified.
 */
function menu_example_custom_access($role_name) {
  $access_granted = in_array($role_name, $GLOBALS['user']->roles);
  return $access_granted;
}